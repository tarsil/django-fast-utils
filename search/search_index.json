{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Django Fast Utils \u00b6 Official Documentation - https://tarsil.github.io/django-fast-utils/ Table of Contents \u00b6 Django Fast Utils Table of Contents About Django Fast Utils Overview Supported Django and Python Versions Documentation Installation Documentation and Support License About Django Fast Utils \u00b6 Django Fast Utils is a miscellaneous of common utilities for every new or existing django projects. From auditing models to database fields and REST framework mixins. Overview \u00b6 Supported Django and Python Versions \u00b6 Django / Python 3.7 3.8 3.9 3.10 2.2 Yes Yes Yes Yes 3.0 Yes Yes Yes Yes 3.1 Yes Yes Yes Yes 3.2 Yes Yes Yes Yes 4.0 Yes Yes Yes Yes Documentation \u00b6 Installation \u00b6 To install django-fast-utils: $ pip install django-fast-utils Documentation and Support \u00b6 Full documentation for the project is available at https://tarsil.github.io/django-fast-utils/ License \u00b6 Copyright (c) 2022-present Tiago Silva and contributors under the MIT license .","title":"Introduction"},{"location":"#django-fast-utils","text":"Official Documentation - https://tarsil.github.io/django-fast-utils/","title":"Django Fast Utils"},{"location":"#table-of-contents","text":"Django Fast Utils Table of Contents About Django Fast Utils Overview Supported Django and Python Versions Documentation Installation Documentation and Support License","title":"Table of Contents"},{"location":"#about-django-fast-utils","text":"Django Fast Utils is a miscellaneous of common utilities for every new or existing django projects. From auditing models to database fields and REST framework mixins.","title":"About Django Fast Utils"},{"location":"#overview","text":"","title":"Overview"},{"location":"#supported-django-and-python-versions","text":"Django / Python 3.7 3.8 3.9 3.10 2.2 Yes Yes Yes Yes 3.0 Yes Yes Yes Yes 3.1 Yes Yes Yes Yes 3.2 Yes Yes Yes Yes 4.0 Yes Yes Yes Yes","title":"Supported Django and Python Versions"},{"location":"#documentation","text":"","title":"Documentation"},{"location":"#installation","text":"To install django-fast-utils: $ pip install django-fast-utils","title":"Installation"},{"location":"#documentation-and-support","text":"Full documentation for the project is available at https://tarsil.github.io/django-fast-utils/","title":"Documentation and Support"},{"location":"#license","text":"Copyright (c) 2022-present Tiago Silva and contributors under the MIT license .","title":"License"},{"location":"backends/","text":"Backends \u00b6 Email Backend \u00b6 Authentication backend that uses the email instead of the username for the logins. How to use \u00b6 In your settings.py file, add the following. AUTHENTICATION_BACKENDS = ( ... \"django_fast_utils.backends.EmailBackend\" , ) You can now use the email to login into your application using the authenticate django standard. Example \u00b6 Using Django Rest framework . views.py from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .serializers import LoginSerializer class LoginApiView ( APIView ): serializer_class = LoginSerializer def post ( self , request , * args , ** kwargs ): serializer = self . serializer_class ( data = request . data ) serializer . is_valid ( raise_exception = True ) user = serializer . get_user () login ( request , user ) return Response ( status = status . HTTP_200_OK ) serializers.py from rest_framework import serializers class LoginSerializer ( serializers . Serializer ): email = serializers . EmailField ( allow_blank = False , required = True ) password = serializers . CharField ( allow_blank = False , required = True ) def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . auth_user = None def get_user ( self ): return self . auth_user def validate ( self , attrs ): try : email = attrs [ \"email\" ] . strip () password = attrs [ \"password\" ] try : self . auth_user = authenticate ( email = email , password = password ) except ValueError : self . auth_user = None if self . auth_user : return attrs except ( accounts . models . HubUser . DoesNotExist , KeyError ): raise serializers . ValidationError ( _ ( \"Your login details were incorrect. Please try again.\" ))","title":"Backends"},{"location":"backends/#backends","text":"","title":"Backends"},{"location":"backends/#email-backend","text":"Authentication backend that uses the email instead of the username for the logins.","title":"Email Backend"},{"location":"backends/#how-to-use","text":"In your settings.py file, add the following. AUTHENTICATION_BACKENDS = ( ... \"django_fast_utils.backends.EmailBackend\" , ) You can now use the email to login into your application using the authenticate django standard.","title":"How to use"},{"location":"backends/#example","text":"Using Django Rest framework . views.py from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .serializers import LoginSerializer class LoginApiView ( APIView ): serializer_class = LoginSerializer def post ( self , request , * args , ** kwargs ): serializer = self . serializer_class ( data = request . data ) serializer . is_valid ( raise_exception = True ) user = serializer . get_user () login ( request , user ) return Response ( status = status . HTTP_200_OK ) serializers.py from rest_framework import serializers class LoginSerializer ( serializers . Serializer ): email = serializers . EmailField ( allow_blank = False , required = True ) password = serializers . CharField ( allow_blank = False , required = True ) def __init__ ( self , * args , ** kwargs ): super () . __init__ ( * args , ** kwargs ) self . auth_user = None def get_user ( self ): return self . auth_user def validate ( self , attrs ): try : email = attrs [ \"email\" ] . strip () password = attrs [ \"password\" ] try : self . auth_user = authenticate ( email = email , password = password ) except ValueError : self . auth_user = None if self . auth_user : return attrs except ( accounts . models . HubUser . DoesNotExist , KeyError ): raise serializers . ValidationError ( _ ( \"Your login details were incorrect. Please try again.\" ))","title":"Example"},{"location":"exceptions/","text":"Exceptions \u00b6 Django Rest framework brings all the package when it comes to validations but sometimes there is a need to have something more unique and granular. ValidationException \u00b6 The application on any level (view, model, serializer) can raise an exception similar to APIException but with the possibility of providing different status_code and message details. How to use \u00b6 ... from django_fast_utils.exceptions import ValidationException class MyView ( APIView ): def get ( self , request , * args , ** kwargs ): try : user = User . objects . get ( pk = 1 ) except User . DoesNotExist : raise ValidationException ( \"User does not exist.\" , status_code = 200 ) ValidationError \u00b6 Same as as ValidationException with the default to HTTP_400_BAD_REQUEST . NotAuthorized \u00b6 Same as as ValidationException with the default to HTTP_401_UNAUTHORIZED . PermissionDenied \u00b6 Same as as ValidationException with the default to HTTP_403_FORBIDDEN .","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"Django Rest framework brings all the package when it comes to validations but sometimes there is a need to have something more unique and granular.","title":"Exceptions"},{"location":"exceptions/#validationexception","text":"The application on any level (view, model, serializer) can raise an exception similar to APIException but with the possibility of providing different status_code and message details.","title":"ValidationException"},{"location":"exceptions/#how-to-use","text":"... from django_fast_utils.exceptions import ValidationException class MyView ( APIView ): def get ( self , request , * args , ** kwargs ): try : user = User . objects . get ( pk = 1 ) except User . DoesNotExist : raise ValidationException ( \"User does not exist.\" , status_code = 200 )","title":"How to use"},{"location":"exceptions/#validationerror","text":"Same as as ValidationException with the default to HTTP_400_BAD_REQUEST .","title":"ValidationError"},{"location":"exceptions/#notauthorized","text":"Same as as ValidationException with the default to HTTP_401_UNAUTHORIZED .","title":"NotAuthorized"},{"location":"exceptions/#permissiondenied","text":"Same as as ValidationException with the default to HTTP_403_FORBIDDEN .","title":"PermissionDenied"},{"location":"fields/","text":"Fields \u00b6 Custom fields to be used within models or serializers of any django application using Django Rest framework . ChoicesField \u00b6 Django provides a choices inside the CharField with the attribute choices . This field is a wrapper that allows direct declaration in the models. How to use \u00b6 from django_fast_utils.fields import ChoicesField from django.db import models class MyModel ( models . Model ): custom_choices = ChoicesField ( choices = MY_CHOICES ) ... WritableSerializerMethodField \u00b6 Custom version of SerializerMethodField from Django Rest framework that allows read/write. How to use \u00b6 from django_fast_utils.fields import WritableSerializerMethodField from rest_framwork import serializers class MySerializer ( serializers . Serializer ): name = WritableSerializerMethodField () def get_name ( self , instance ): ... ... AbsoluteImageField \u00b6 When serializing an ImageField url usually implies some extra code to show the full path url and expose the full url into APIs. How to use \u00b6 from django_fast_utils.fields import AbsoluteImageField from rest_framwork import serializers class MySerializer ( serializers . Serializer ): photo = AbsoluteImageField ()","title":"Fields"},{"location":"fields/#fields","text":"Custom fields to be used within models or serializers of any django application using Django Rest framework .","title":"Fields"},{"location":"fields/#choicesfield","text":"Django provides a choices inside the CharField with the attribute choices . This field is a wrapper that allows direct declaration in the models.","title":"ChoicesField"},{"location":"fields/#how-to-use","text":"from django_fast_utils.fields import ChoicesField from django.db import models class MyModel ( models . Model ): custom_choices = ChoicesField ( choices = MY_CHOICES ) ...","title":"How to use"},{"location":"fields/#writableserializermethodfield","text":"Custom version of SerializerMethodField from Django Rest framework that allows read/write.","title":"WritableSerializerMethodField"},{"location":"fields/#how-to-use_1","text":"from django_fast_utils.fields import WritableSerializerMethodField from rest_framwork import serializers class MySerializer ( serializers . Serializer ): name = WritableSerializerMethodField () def get_name ( self , instance ): ... ...","title":"How to use"},{"location":"fields/#absoluteimagefield","text":"When serializing an ImageField url usually implies some extra code to show the full path url and expose the full url into APIs.","title":"AbsoluteImageField"},{"location":"fields/#how-to-use_2","text":"from django_fast_utils.fields import AbsoluteImageField from rest_framwork import serializers class MySerializer ( serializers . Serializer ): photo = AbsoluteImageField ()","title":"How to use"},{"location":"helpers/","text":"Helpers \u00b6 The package provides some helpers to make the development easier. BaseClass \u00b6 This class is used to simulate a direct comparison between python objects excluding the id allowing an immediate object to object valuation. How to use \u00b6 from django_fast_utils.helpers import BaseClass class MyObject ( BaseClass ): def __init__ ( self , name ): self . name = name obj1 = MyObject ( name = 'test' ) obj2 = MyObject ( name = 'test' ) obj1 == obj2 # returns True Slot2Object \u00b6 Converts a dictionary to a python like direct object with one level. How to use \u00b6 from django_fast_utils.helpers import Slot2Object _dict = { 'a' : 1 , 'b' : { 'c' : 1 }, { 'd' : { 'd1' : 3 }}} s = Slot2Object ( _dict ) Result : s . a 1 s . b { 'c' : 1 } json_2object \u00b6 Returns a Python type object from a json type SlotObject \u00b6 Similar to Slot2Object but with access to all object levels. Class that converts a dict into an object using slots. Performance wise, is faster and gives a better memory usage. This class provides a nested setattr. How to use \u00b6 from django_fast_utils.helpers import SlotObject _dict = { 'a' : 1 , 'b' : { 'c' : 1 }} s = SlotObject ( _dict ) Result : s . a 1 s . b . c 1 remove_prefix \u00b6 For versions prior to python 3.9, removes the prefixes from a given string. How to use \u00b6 from django_fast_utils.helpers import remove_prefix remove_prefix ( 'mytest' , 'my' ) # Returns 'test' Singleton \u00b6 Python object implementation of a Singleton How to use \u00b6 from django_fast_utils.helpers import Singleton class A : pass class B ( Singleton ): pass a1 = A () a2 = A () b1 = B () b2 = B () assert a1 != a2 # True assert b1 == b2 # True","title":"Helpers"},{"location":"helpers/#helpers","text":"The package provides some helpers to make the development easier.","title":"Helpers"},{"location":"helpers/#baseclass","text":"This class is used to simulate a direct comparison between python objects excluding the id allowing an immediate object to object valuation.","title":"BaseClass"},{"location":"helpers/#how-to-use","text":"from django_fast_utils.helpers import BaseClass class MyObject ( BaseClass ): def __init__ ( self , name ): self . name = name obj1 = MyObject ( name = 'test' ) obj2 = MyObject ( name = 'test' ) obj1 == obj2 # returns True","title":"How to use"},{"location":"helpers/#slot2object","text":"Converts a dictionary to a python like direct object with one level.","title":"Slot2Object"},{"location":"helpers/#how-to-use_1","text":"from django_fast_utils.helpers import Slot2Object _dict = { 'a' : 1 , 'b' : { 'c' : 1 }, { 'd' : { 'd1' : 3 }}} s = Slot2Object ( _dict ) Result : s . a 1 s . b { 'c' : 1 }","title":"How to use"},{"location":"helpers/#json_2object","text":"Returns a Python type object from a json type","title":"json_2object"},{"location":"helpers/#slotobject","text":"Similar to Slot2Object but with access to all object levels. Class that converts a dict into an object using slots. Performance wise, is faster and gives a better memory usage. This class provides a nested setattr.","title":"SlotObject"},{"location":"helpers/#how-to-use_2","text":"from django_fast_utils.helpers import SlotObject _dict = { 'a' : 1 , 'b' : { 'c' : 1 }} s = SlotObject ( _dict ) Result : s . a 1 s . b . c 1","title":"How to use"},{"location":"helpers/#remove_prefix","text":"For versions prior to python 3.9, removes the prefixes from a given string.","title":"remove_prefix"},{"location":"helpers/#how-to-use_3","text":"from django_fast_utils.helpers import remove_prefix remove_prefix ( 'mytest' , 'my' ) # Returns 'test'","title":"How to use"},{"location":"helpers/#singleton","text":"Python object implementation of a Singleton","title":"Singleton"},{"location":"helpers/#how-to-use_4","text":"from django_fast_utils.helpers import Singleton class A : pass class B ( Singleton ): pass a1 = A () a2 = A () b1 = B () b2 = B () assert a1 != a2 # True assert b1 == b2 # True","title":"How to use"},{"location":"paginator/","text":"Paginator \u00b6 NumberDetailPagination \u00b6 Django Rest framework provides standard paginator classes but sometimes more details are needed to sent in the payload. Payload definition \u00b6 links ': { 'next' : next page url , 'previous' : previous page url }, 'count' : number of records fetched , 'total_pages' : total number of pages , 'next' : bool has next page , 'previous' : bool has previous page , 'results' : result set }) How to use \u00b6 View level: from django_fast_utils.paginator import NumberDetailPagination ... class MyView ( ListAPIView ): pagination_class = NumberDetailPagination ... Making it global and default for all views with pagination: REST_FRAMEWORK = { ... \"DEFAULT_PAGINATION_CLASS\" : \"django_fast_utils.paginator.NumberDetailPagination\" ... }","title":"Paginator"},{"location":"paginator/#paginator","text":"","title":"Paginator"},{"location":"paginator/#numberdetailpagination","text":"Django Rest framework provides standard paginator classes but sometimes more details are needed to sent in the payload.","title":"NumberDetailPagination"},{"location":"paginator/#payload-definition","text":"links ': { 'next' : next page url , 'previous' : previous page url }, 'count' : number of records fetched , 'total_pages' : total number of pages , 'next' : bool has next page , 'previous' : bool has previous page , 'results' : result set })","title":"Payload definition"},{"location":"paginator/#how-to-use","text":"View level: from django_fast_utils.paginator import NumberDetailPagination ... class MyView ( ListAPIView ): pagination_class = NumberDetailPagination ... Making it global and default for all views with pagination: REST_FRAMEWORK = { ... \"DEFAULT_PAGINATION_CLASS\" : \"django_fast_utils.paginator.NumberDetailPagination\" ... }","title":"How to use"},{"location":"permissions/","text":"Permissions \u00b6 Django Fast Utils uses Django Guardian to manipulate the permissions of objects. How to use \u00b6 Add django-guardian to your project settings.py . INSTALLED_APPS = ( # ... 'guardian' ) AUTHENTICATION_BACKENDS = ( ... 'guardian.backends.ObjectPermissionBackend' , ... ) Use in your code. from django_fast_utils.permissions import assign_user_perm assign_user_perm ( 'is_super_user' , user , cars ) # (Default value = False) user . has_perm ( 'is_super_user' , user ) # True Django guardian by default creates an anonymous user and that can be disabled in the settings.py . ANONYMOUS_USER_NAME = None","title":"Permissions"},{"location":"permissions/#permissions","text":"Django Fast Utils uses Django Guardian to manipulate the permissions of objects.","title":"Permissions"},{"location":"permissions/#how-to-use","text":"Add django-guardian to your project settings.py . INSTALLED_APPS = ( # ... 'guardian' ) AUTHENTICATION_BACKENDS = ( ... 'guardian.backends.ObjectPermissionBackend' , ... ) Use in your code. from django_fast_utils.permissions import assign_user_perm assign_user_perm ( 'is_super_user' , user , cars ) # (Default value = False) user . has_perm ( 'is_super_user' , user ) # True Django guardian by default creates an anonymous user and that can be disabled in the settings.py . ANONYMOUS_USER_NAME = None","title":"How to use"},{"location":"releases/","text":"Releases \u00b6 2.0.4 \u00b6 Fixed code smell in get_prep_value from ListField . 2.0.3 \u00b6 Fixed middleware validation and verification. Added DJANGO_FAST_UTILS settings. Added LogoutJWTApiView . 2.0.2 \u00b6 Changed imports. 2.0.1 \u00b6 Added missing requirement. 2.0.0 \u00b6 Added LoginJWTApiView allowing the JWT Token being protected via httpOnly=true cookie and refreshing the token via middleware . Docs here . 1.0.3 \u00b6 Fixed typo in PrefetchRelatedMixin . 1.0.2 \u00b6 Add SelectRelatedMixin and PrefetchRelatedMixin for generic views. 1.0.1 \u00b6 Fix django-guardian dependency. 1.0.0 \u00b6 Initial release of django-fast-utils .","title":"Releases"},{"location":"releases/#releases","text":"","title":"Releases"},{"location":"releases/#204","text":"Fixed code smell in get_prep_value from ListField .","title":"2.0.4"},{"location":"releases/#203","text":"Fixed middleware validation and verification. Added DJANGO_FAST_UTILS settings. Added LogoutJWTApiView .","title":"2.0.3"},{"location":"releases/#202","text":"Changed imports.","title":"2.0.2"},{"location":"releases/#201","text":"Added missing requirement.","title":"2.0.1"},{"location":"releases/#200","text":"Added LoginJWTApiView allowing the JWT Token being protected via httpOnly=true cookie and refreshing the token via middleware . Docs here .","title":"2.0.0"},{"location":"releases/#103","text":"Fixed typo in PrefetchRelatedMixin .","title":"1.0.3"},{"location":"releases/#102","text":"Add SelectRelatedMixin and PrefetchRelatedMixin for generic views.","title":"1.0.2"},{"location":"releases/#101","text":"Fix django-guardian dependency.","title":"1.0.1"},{"location":"releases/#100","text":"Initial release of django-fast-utils .","title":"1.0.0"},{"location":"auth/generics/","text":"Auth \u00b6 Django Rest framework provides a set of abstractions on the top of django. This package provides an abstraction on the top of Django Rest framework. AnonymousAuthentication \u00b6 Mixin for anonymous users. How to use \u00b6 from django_fast_utils.auth.generics import AnonymousAuthentication from rest_framework.views import APIView class MyView ( AnonymousAuthentication , APIView ): pass AuthMixin \u00b6 Django rest framework doesn't append permission_classes on inherited models which can bring issues when it comes to call an API programmatically, this way we create a metaclass that will read from a property custom from our subclasses and will append to the default permission_classes . How to use \u00b6 from django_fast_utils.auth.generics import AuthMixin from rest_framework.views import APIView from rest_framework.permissions import IsAdminUser class MyView ( AuthMixin , APIView ): permissions = [ IsAdminUser ] MyView . permissions # Returns IsAuthenticated (default from AuthMixin) and IsAdminUser Django Fast Utils allows to extend the permissions on every inherited view without overriding anything. NoPermissionsMixin \u00b6 No permissions applied to the views. Only used when no permissions (auth) is not needed for specific cases. RequiredUserContextView \u00b6 Used to inject the request.user into serializers when needed. How to use \u00b6 from django_fast_utils.auth.generics import RequiredUserContextView class MyView ( RequiredUserContextView , ListAPIView ): ... class MySecondView ( RequiredUserContextView , APIView ): def post ( self , request , * args , ** kwargs ): serializer = MySerializer ( data = request . data , context = self . get_serializer_context ())","title":"Generics"},{"location":"auth/generics/#auth","text":"Django Rest framework provides a set of abstractions on the top of django. This package provides an abstraction on the top of Django Rest framework.","title":"Auth"},{"location":"auth/generics/#anonymousauthentication","text":"Mixin for anonymous users.","title":"AnonymousAuthentication"},{"location":"auth/generics/#how-to-use","text":"from django_fast_utils.auth.generics import AnonymousAuthentication from rest_framework.views import APIView class MyView ( AnonymousAuthentication , APIView ): pass","title":"How to use"},{"location":"auth/generics/#authmixin","text":"Django rest framework doesn't append permission_classes on inherited models which can bring issues when it comes to call an API programmatically, this way we create a metaclass that will read from a property custom from our subclasses and will append to the default permission_classes .","title":"AuthMixin"},{"location":"auth/generics/#how-to-use_1","text":"from django_fast_utils.auth.generics import AuthMixin from rest_framework.views import APIView from rest_framework.permissions import IsAdminUser class MyView ( AuthMixin , APIView ): permissions = [ IsAdminUser ] MyView . permissions # Returns IsAuthenticated (default from AuthMixin) and IsAdminUser Django Fast Utils allows to extend the permissions on every inherited view without overriding anything.","title":"How to use"},{"location":"auth/generics/#nopermissionsmixin","text":"No permissions applied to the views. Only used when no permissions (auth) is not needed for specific cases.","title":"NoPermissionsMixin"},{"location":"auth/generics/#requiredusercontextview","text":"Used to inject the request.user into serializers when needed.","title":"RequiredUserContextView"},{"location":"auth/generics/#how-to-use_2","text":"from django_fast_utils.auth.generics import RequiredUserContextView class MyView ( RequiredUserContextView , ListAPIView ): ... class MySecondView ( RequiredUserContextView , APIView ): def post ( self , request , * args , ** kwargs ): serializer = MySerializer ( data = request . data , context = self . get_serializer_context ())","title":"How to use"},{"location":"db/fields/","text":"Database \u00b6 Custom fields to be used within the models. ListField \u00b6 Save lists in python format directly. How to use \u00b6 from django.db import models from django_fast_utils.db.fields import ListField class MyModel ( models . Model ): my_list = ListField () ...","title":"Fields"},{"location":"db/fields/#database","text":"Custom fields to be used within the models.","title":"Database"},{"location":"db/fields/#listfield","text":"Save lists in python format directly.","title":"ListField"},{"location":"db/fields/#how-to-use","text":"from django.db import models from django_fast_utils.db.fields import ListField class MyModel ( models . Model ): my_list = ListField () ...","title":"How to use"},{"location":"utils/audit/","text":"Audit \u00b6 Mixins that injects fields into django models allowing the audit trailing. GeneralDateTimeModel \u00b6 Adds only created_at and updated_at How to use \u00b6 from django.db import models from django_fast_utils.utils.audit import GeneralDateTimeModel class MyModel ( GeneralDateTimeModel ): ... IndexGeneralDateTimeModel \u00b6 Adds only created_at as index and updated_at as index. How to use \u00b6 from django.db import models from django_fast_utils.utils.audit import IndexGeneralDateTimeModel class MyModel ( IndexGeneralDateTimeModel ): ... TimeStampedModel \u00b6 Adds created_at , updated_at , created_by and updated_by to the model and created_by and updated_by are mandatory . created_by and updated_by are FK to the settings.AUTH_USER_MODEL . How to use \u00b6 from django.db import models from django_fast_utils.utils.audit import TimeStampedModel class MyModel ( TimeStampedModel ): ... GeneralTimeStampedModel \u00b6 Adds created_at , updated_at , created_by and updated_by to the model and created_by and updated_by are not mandatory . created_by and updated_by are FK to the settings.AUTH_USER_MODEL . How to use \u00b6 from django.db import models from django_fast_utils.utils.audit import GeneralTimeStampedModel class MyModel ( GeneralTimeStampedModel ): ... IndexedGeneralTimeStampedModel \u00b6 Adds created_at , updated_at , created_by and updated_by to the model and created_by and updated_by are not mandatory . created_by and updated_by are FK to the settings.AUTH_USER_MODEL . How to use \u00b6 from django.db import models from django_fast_utils.utils.audit import IndexedGeneralTimeStampedModel class MyModel ( IndexedGeneralTimeStampedModel ): ...","title":"Audit"},{"location":"utils/audit/#audit","text":"Mixins that injects fields into django models allowing the audit trailing.","title":"Audit"},{"location":"utils/audit/#generaldatetimemodel","text":"Adds only created_at and updated_at","title":"GeneralDateTimeModel"},{"location":"utils/audit/#how-to-use","text":"from django.db import models from django_fast_utils.utils.audit import GeneralDateTimeModel class MyModel ( GeneralDateTimeModel ): ...","title":"How to use"},{"location":"utils/audit/#indexgeneraldatetimemodel","text":"Adds only created_at as index and updated_at as index.","title":"IndexGeneralDateTimeModel"},{"location":"utils/audit/#how-to-use_1","text":"from django.db import models from django_fast_utils.utils.audit import IndexGeneralDateTimeModel class MyModel ( IndexGeneralDateTimeModel ): ...","title":"How to use"},{"location":"utils/audit/#timestampedmodel","text":"Adds created_at , updated_at , created_by and updated_by to the model and created_by and updated_by are mandatory . created_by and updated_by are FK to the settings.AUTH_USER_MODEL .","title":"TimeStampedModel"},{"location":"utils/audit/#how-to-use_2","text":"from django.db import models from django_fast_utils.utils.audit import TimeStampedModel class MyModel ( TimeStampedModel ): ...","title":"How to use"},{"location":"utils/audit/#generaltimestampedmodel","text":"Adds created_at , updated_at , created_by and updated_by to the model and created_by and updated_by are not mandatory . created_by and updated_by are FK to the settings.AUTH_USER_MODEL .","title":"GeneralTimeStampedModel"},{"location":"utils/audit/#how-to-use_3","text":"from django.db import models from django_fast_utils.utils.audit import GeneralTimeStampedModel class MyModel ( GeneralTimeStampedModel ): ...","title":"How to use"},{"location":"utils/audit/#indexedgeneraltimestampedmodel","text":"Adds created_at , updated_at , created_by and updated_by to the model and created_by and updated_by are not mandatory . created_by and updated_by are FK to the settings.AUTH_USER_MODEL .","title":"IndexedGeneralTimeStampedModel"},{"location":"utils/audit/#how-to-use_4","text":"from django.db import models from django_fast_utils.utils.audit import IndexedGeneralTimeStampedModel class MyModel ( IndexedGeneralTimeStampedModel ): ...","title":"How to use"},{"location":"views/auth/","text":"Authentication with JWT \u00b6 JWT (JSON Web Token) is widely used for authentication but with that also brings certain level of concerns such as where to store the access and refresh tokens. There are multiple ways: Local Storage - Prompt for XSS attacks. Session Storage - Deplects the UX of a user as it needs to login on each tab session. Cookie - Limited but with specific options and safer using httpOnly = True . Django Fast Utils covers the Cookies. Cookie httpOnly \u00b6 When a cookie is set to httpOnly true, JavaScript cannot read and/or access those values making the refresh and access tokens safer in the browser and reducing the attacks. Installation \u00b6 Django Fast Utils uses Django Rest Framework SimpleJWT Settings \u00b6 Add rest_framework_simplejwt and rest_framework_simple_jwt.token_blacklist to your settings.py INSTALLED_APPS = [ ... 'rest_framework_simplejwt' , 'rest_framework_simplejwt.token_blacklist' , ... ] Add the django_fast_utils.auth.middleware.JWTRefreshRequestCookies' to MIDDLEWARE`. MIDDLEWARE = [ ... 'django_fast_utils.auth.middleware.JWTRefreshRequestCookies' , 'django.contrib.auth.middleware.AuthenticationMiddleware' , ... ] Update your REST_FRAMEWORK settings. REST_FRAMEWORK = { # Use Django's standard `django.contrib.auth` permissions, # or allow read-only access for unauthenticated users. \"DEFAULT_AUTHENTICATION_CLASSES\" : ( ... ... 'django_fast_utils.auth.backends.JWTCustomAuthentication' , ), } Update the SIMPLE_JWT to have django_fast_utils settings for the authentication. SIMPLE_JWT = { ... # JWT FOR HTTP ONLY COOKIE SETTINGS 'AUTH_COOKIE' : 'access' , # Cookie name. Enables cookies if value is set. 'AUTH_COOKIE_DOMAIN' : None , # A string like \"example.com\", or None for standard domain cookie. 'AUTH_COOKIE_SECURE' : True , # Whether the auth cookies should be secure (https:// only). 'AUTH_COOKIE_HTTP_ONLY' : True , # Http only cookie flag. It's not fetch by JS. 'AUTH_COOKIE_PATH' : '/' , # The path of the auth cookie. 'AUTH_COOKIE_SAMESITE' : 'Lax' , # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag. 'REFRESH_COOKIE' : 'refresh' , # Cookie name. Enables cookies if value is set. 'REFRESH_COOKIE_DOMAIN' : None , # A string like \"example.com\", or None for standard domain cookie. 'REFRESH_COOKIE_SECURE' : True , # Whether the auth cookies should be secure (https:// only). 'REFRESH_COOKIE_HTTP_ONLY' : True , # Http only cookie flag.It's not fetch by JS. 'REFRESH_COOKIE_PATH' : '/' , # The path of the auth cookie. 'REFRESH_COOKIE_SAMESITE' : 'Lax' , # Flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag. } Add the LoginJWTApiView and LogoutJWTApiView to your urls. In your settings.py add DJANGO_FAST_UTILS setting: DJANGO_FAST_UTILS = { 'LOGOUT_URL' : [ '/logout' ] } The LOGOUT_URL is expecting as list of possible logout urls used by the application. This will ensure the middleware doesn't execute logic for specific views such as refresh of tokens. Default : ['/logout'] from django.urls import path from django_fast_utils.views.auth.views import LoginJWTApiView , LogoutJWTApiView urlpatterns = [ ... path ( 'login' , LoginJWTApiView . as_view (), name = 'login' ), path ( 'logout' , LoginJWTApiView . as_view (), name = 'logout' ) ... ] That's it! . You can now login into your application using email and password and you can see in your browser that the cookies are now set as httpOnly true. Refresh \u00b6 Djago Fast Utils middleware handles with the automatic refresh of the token based on the settings you added on the default SIMPLE_JWT settings. SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME' : timedelta ( minutes = 5 ), 'REFRESH_TOKEN_LIFETIME' : timedelta ( days = 200 ), ... }","title":"JWT Auth"},{"location":"views/auth/#authentication-with-jwt","text":"JWT (JSON Web Token) is widely used for authentication but with that also brings certain level of concerns such as where to store the access and refresh tokens. There are multiple ways: Local Storage - Prompt for XSS attacks. Session Storage - Deplects the UX of a user as it needs to login on each tab session. Cookie - Limited but with specific options and safer using httpOnly = True . Django Fast Utils covers the Cookies.","title":"Authentication with JWT"},{"location":"views/auth/#cookie-httponly","text":"When a cookie is set to httpOnly true, JavaScript cannot read and/or access those values making the refresh and access tokens safer in the browser and reducing the attacks.","title":"Cookie httpOnly"},{"location":"views/auth/#installation","text":"Django Fast Utils uses Django Rest Framework SimpleJWT","title":"Installation"},{"location":"views/auth/#settings","text":"Add rest_framework_simplejwt and rest_framework_simple_jwt.token_blacklist to your settings.py INSTALLED_APPS = [ ... 'rest_framework_simplejwt' , 'rest_framework_simplejwt.token_blacklist' , ... ] Add the django_fast_utils.auth.middleware.JWTRefreshRequestCookies' to MIDDLEWARE`. MIDDLEWARE = [ ... 'django_fast_utils.auth.middleware.JWTRefreshRequestCookies' , 'django.contrib.auth.middleware.AuthenticationMiddleware' , ... ] Update your REST_FRAMEWORK settings. REST_FRAMEWORK = { # Use Django's standard `django.contrib.auth` permissions, # or allow read-only access for unauthenticated users. \"DEFAULT_AUTHENTICATION_CLASSES\" : ( ... ... 'django_fast_utils.auth.backends.JWTCustomAuthentication' , ), } Update the SIMPLE_JWT to have django_fast_utils settings for the authentication. SIMPLE_JWT = { ... # JWT FOR HTTP ONLY COOKIE SETTINGS 'AUTH_COOKIE' : 'access' , # Cookie name. Enables cookies if value is set. 'AUTH_COOKIE_DOMAIN' : None , # A string like \"example.com\", or None for standard domain cookie. 'AUTH_COOKIE_SECURE' : True , # Whether the auth cookies should be secure (https:// only). 'AUTH_COOKIE_HTTP_ONLY' : True , # Http only cookie flag. It's not fetch by JS. 'AUTH_COOKIE_PATH' : '/' , # The path of the auth cookie. 'AUTH_COOKIE_SAMESITE' : 'Lax' , # Whether to set the flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag. 'REFRESH_COOKIE' : 'refresh' , # Cookie name. Enables cookies if value is set. 'REFRESH_COOKIE_DOMAIN' : None , # A string like \"example.com\", or None for standard domain cookie. 'REFRESH_COOKIE_SECURE' : True , # Whether the auth cookies should be secure (https:// only). 'REFRESH_COOKIE_HTTP_ONLY' : True , # Http only cookie flag.It's not fetch by JS. 'REFRESH_COOKIE_PATH' : '/' , # The path of the auth cookie. 'REFRESH_COOKIE_SAMESITE' : 'Lax' , # Flag restricting cookie leaks on cross-site requests. This can be 'Lax', 'Strict', or None to disable the flag. } Add the LoginJWTApiView and LogoutJWTApiView to your urls. In your settings.py add DJANGO_FAST_UTILS setting: DJANGO_FAST_UTILS = { 'LOGOUT_URL' : [ '/logout' ] } The LOGOUT_URL is expecting as list of possible logout urls used by the application. This will ensure the middleware doesn't execute logic for specific views such as refresh of tokens. Default : ['/logout'] from django.urls import path from django_fast_utils.views.auth.views import LoginJWTApiView , LogoutJWTApiView urlpatterns = [ ... path ( 'login' , LoginJWTApiView . as_view (), name = 'login' ), path ( 'logout' , LoginJWTApiView . as_view (), name = 'logout' ) ... ] That's it! . You can now login into your application using email and password and you can see in your browser that the cookies are now set as httpOnly true.","title":"Settings"},{"location":"views/auth/#refresh","text":"Djago Fast Utils middleware handles with the automatic refresh of the token based on the settings you added on the default SIMPLE_JWT settings. SIMPLE_JWT = { 'ACCESS_TOKEN_LIFETIME' : timedelta ( minutes = 5 ), 'REFRESH_TOKEN_LIFETIME' : timedelta ( days = 200 ), ... }","title":"Refresh"},{"location":"views/generics/","text":"Generics \u00b6 Mixins that can be used to optimise some of the querysets. SelectRelatedMixin \u00b6 Optimises the queryset on a SQL level. More information . How to use \u00b6 from django.db import models from django_fast_utils.views.generics import SelectRelatedMixin from rest_framework.generics import ListAPIView class MyView ( SelectRelatedMixin , ListAPIView ): select_related = [ 'company' , 'company__user' ] PrefetchRelatedMixin \u00b6 Optimises the queryset on a Pythonic level. More information . How to use \u00b6 from django.db import models from django_fast_utils.views.generics import PrefetchRelatedMixin from rest_framework.generics import ListAPIView class MyView ( PrefetchRelatedMixin , ListAPIView ): prefetch_related = [ 'company' , 'company__user' ]","title":"Generics"},{"location":"views/generics/#generics","text":"Mixins that can be used to optimise some of the querysets.","title":"Generics"},{"location":"views/generics/#selectrelatedmixin","text":"Optimises the queryset on a SQL level. More information .","title":"SelectRelatedMixin"},{"location":"views/generics/#how-to-use","text":"from django.db import models from django_fast_utils.views.generics import SelectRelatedMixin from rest_framework.generics import ListAPIView class MyView ( SelectRelatedMixin , ListAPIView ): select_related = [ 'company' , 'company__user' ]","title":"How to use"},{"location":"views/generics/#prefetchrelatedmixin","text":"Optimises the queryset on a Pythonic level. More information .","title":"PrefetchRelatedMixin"},{"location":"views/generics/#how-to-use_1","text":"from django.db import models from django_fast_utils.views.generics import PrefetchRelatedMixin from rest_framework.generics import ListAPIView class MyView ( PrefetchRelatedMixin , ListAPIView ): prefetch_related = [ 'company' , 'company__user' ]","title":"How to use"}]}